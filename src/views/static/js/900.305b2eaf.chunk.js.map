{"version":3,"file":"static/js/900.305b2eaf.chunk.js","mappings":"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","sources":["pages/register.page.tsx"],"sourcesContent":["import { Box, Container, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n  FormProvider,\n  SubmitHandler,\n  useForm,\n} from 'react-hook-form';\nimport { object, string, TypeOf } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport FormInput from '../components/FormInput';\nimport { useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { LoadingButton as _LoadingButton } from '@mui/lab';\nimport { toast } from 'react-toastify';\nimport { useMutation } from '@tanstack/react-query';\nimport { signUpUserFn } from '../api/authApi';\n\nconst LoadingButton = styled(_LoadingButton)`\n  padding: 0.6rem 0;\n  background-color: #f9d13e;\n  color: #2363eb;\n  font-weight: 500;\n\n  &:hover {\n    background-color: #ebc22c;\n    transform: translateY(-2px);\n  }\n`;\n\nconst LinkItem = styled(Link)`\n  text-decoration: none;\n  color: #2363eb;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst registerSchema = object({\n  username: string().min(1, 'Full name is required').max(100),\n  email: string()\n    .min(1, 'Email address is required')\n    .email('Email Address is invalid'),\n  password: string()\n    .min(1, 'Password is required')\n    .min(8, 'Password must be more than 8 characters')\n    .max(32, 'Password must be less than 32 characters'),\n  passwordConfirm: string().min(1, 'Please confirm your password'),\n}).refine((data) => data.password === data.passwordConfirm, {\n  path: ['passwordConfirm'],\n  message: 'Passwords do not match',\n});\n\nexport type RegisterInput = TypeOf<typeof registerSchema>;\n\nconst RegisterPage = () => {\n  const navigate = useNavigate();\n\n  const methods = useForm<RegisterInput>({\n    resolver: zodResolver(registerSchema),\n  });\n\n  // ? Calling the Register Mutation\n  const { mutate, isLoading } = useMutation(\n    (userData: RegisterInput) => signUpUserFn(userData),\n    {\n      onSuccess(data) {\n        toast.success(data?.message);\n        navigate('/verifyemail');\n      },\n      onError(error: any) {\n        if (Array.isArray((error as any).response.data.error)) {\n          (error as any).response.data.error.forEach((el: any) =>\n            toast.error(el.message, {\n              position: 'top-right',\n            })\n          );\n        } else {\n          toast.error((error as any).response.data.message, {\n            position: 'top-right',\n          });\n        }\n      },\n    }\n  );\n\n  const {\n    reset,\n    handleSubmit,\n    formState: { isSubmitSuccessful },\n    register,\n  } = methods;\n\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      reset();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isSubmitSuccessful]);\n\n  const onSubmitHandler: SubmitHandler<RegisterInput> = (values) => {\n    // ? Execute the Mutation\n    mutate(values);\n  };\n\n  return (\n    <Container\n      maxWidth={false}\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '100vh',\n        backgroundColor: '#2363eb',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'column',\n        }}\n      >\n        <Typography\n          textAlign=\"center\"\n          component=\"h1\"\n          sx={{\n            color: '#f9d13e',\n            fontSize: { xs: '2rem', md: '3rem' },\n            fontWeight: 600,\n            mb: 2,\n            letterSpacing: 1,\n          }}\n        >\n          Welcome to CodevoWeb!\n        </Typography>\n        <Typography component=\"h2\" sx={{ color: '#e5e7eb', mb: 2 }}>\n          Sign Up To Get Started!\n        </Typography>\n\n        {/* <FormProvider {...methods}>\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit(onSubmitHandler)}\n            noValidate\n            autoComplete=\"off\"\n            maxWidth=\"27rem\"\n            width=\"100%\"\n            sx={{\n              backgroundColor: '#e5e7eb',\n              p: { xs: '1rem', sm: '2rem' },\n              borderRadius: 2,\n            }}\n          >\n            <FormInput name=\"username\" label=\"Username\" />\n            <FormInput\n              name=\"email\"\n              label=\"Email Address\"\n              type=\"email\"\n            />\n            <FormInput\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n            />\n            <FormInput\n              name=\"passwordConfirm\"\n              label=\"Confirm Password\"\n              type=\"password\"\n            />\n            <Typography sx={{ fontSize: '0.9rem', mb: '1rem' }}>\n              Already have an account?{' '}\n              <LinkItem to=\"/login\">Login Here</LinkItem>\n            </Typography>\n\n            <LoadingButton\n              variant=\"contained\"\n              sx={{ mt: 1 }}\n              fullWidth\n              disableElevation\n              type=\"submit\"\n              loading={isLoading}\n            >\n              Sign Up\n            </LoadingButton>\n          </Box>\n        </FormProvider> */}\n\n        <form onSubmit={handleSubmit(onSubmitHandler)}>\n          <input {...register('username')} />\n          <input {...register('email')} />\n          <input {...register('password')} />\n          <input {...register('passwordConfirm')} />\n          <Typography sx={{ fontSize: '0.9rem', mb: '1rem' }}>\n            Already have an account?{' '}\n            <LinkItem to=\"/login\">Login Here</LinkItem>\n          </Typography>\n\n          <LoadingButton\n            variant=\"contained\"\n            sx={{ mt: 1 }}\n            fullWidth\n            disableElevation\n            type=\"submit\"\n            loading={isLoading}\n          >\n            Sign Up\n          </LoadingButton>\n        </form>\n      </Box>\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["LoadingButton","styled","_LoadingButton","_templateObject","_taggedTemplateLiteral","LinkItem","Link","_templateObject2","registerSchema","object","username","string","min","max","email","password","passwordConfirm","refine","data","path","message","navigate","useNavigate","methods","useForm","resolver","zodResolver","_useMutation","useMutation","userData","signUpUserFn","onSuccess","toast","success","onError","error","Array","isArray","response","forEach","el","position","mutate","isLoading","reset","handleSubmit","isSubmitSuccessful","formState","register","useEffect","_jsx","Container","maxWidth","sx","display","justifyContent","alignItems","minHeight","backgroundColor","children","_jsxs","Box","flexDirection","Typography","textAlign","component","color","fontSize","xs","md","fontWeight","mb","letterSpacing","onSubmit","values","_objectSpread","to","variant","mt","fullWidth","disableElevation","type","loading"],"sourceRoot":""}