{"version":3,"file":"static/js/312.898503d1.chunk.js","mappings":"mTAiBMA,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAsBE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4LAYtCC,GAAyBC,EAAAA,EAAAA,IAAO,CACpCC,kBAAkBC,EAAAA,EAAAA,MAASC,IAAI,EAAG,mCAsJpC,UA/I8B,WAC5B,IAAQF,GAAqBG,EAAAA,EAAAA,MAArBH,iBAEFI,GAAUC,EAAAA,EAAAA,IAA+B,CAC7CC,UAAUC,EAAAA,EAAAA,GAAYT,KAIxBU,GAA2CC,EAAAA,EAAAA,IACzC,SAACT,GAAwB,OAAKU,EAAAA,EAAAA,IAAcV,EAAiB,GAC7D,CACEW,UAAW,SAACC,GACVC,EAAAA,GAAMC,QAAY,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMG,SACpBC,EAAS,SACX,EACAC,QAAO,SAACC,GACFC,MAAMC,QAASF,EAAcN,KAAKM,OACnCA,EAAcN,KAAKM,MAAMG,SAAQ,SAACC,GAAO,OACxCT,EAAAA,GAAMK,MAAMI,EAAGP,QAAS,CACtBQ,SAAU,aACV,IAGJV,EAAAA,GAAMK,MAAOA,EAAcN,KAAKG,QAAS,CACvCQ,SAAU,aAGhB,IAnBYC,EAAWhB,EAAnBiB,OAAqBC,EAASlB,EAATkB,UAuBvBV,GAAWW,EAAAA,EAAAA,MAGfC,EAIExB,EAJFwB,MACAC,EAGEzB,EAHFyB,aACaC,EAEX1B,EAFF2B,UAAaD,mBACbE,EACE5B,EADF4B,UAGFC,EAAAA,EAAAA,YAAU,WACJH,GACFF,GAGJ,GAAG,CAACE,KAEJG,EAAAA,EAAAA,YAAU,WACJjC,GACF4B,EAAM,CAAE5B,iBAAAA,GAGZ,GAAG,IASH,OACEkC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,UAAU,EACVC,GAAI,CACFC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,UAAW,QACXC,gBAAiB,WACjBC,UAEFC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFR,GAAI,CACFC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZM,cAAe,UACfH,SAAA,EAEFT,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CACTC,UAAU,SACVC,UAAU,KACVZ,GAAI,CACFa,MAAO,UACPC,WAAY,IACZC,SAAU,CAAEC,GAAI,OAAQC,GAAI,QAC5BC,GAAI,EACJC,cAAe,GACfb,SACH,0BAmCDC,EAAAA,EAAAA,MAAA,QAAMa,SAAU5B,GAvEwC,SAAH6B,GAEpD,IADL1D,EAAgB0D,EAAhB1D,iBAGAwB,EAAYxB,EACd,IAkEoD2C,SAAA,EAC5CT,EAAAA,EAAAA,KAAA,SAAAyB,EAAAA,EAAAA,GAAA,GAAW3B,EAAS,uBACpBE,EAAAA,EAAAA,KAACzC,EAAa,CACZmE,QAAQ,YACRvB,GAAI,CAAEwB,GAAI,GACVC,WAAS,EACTC,kBAAgB,EAChBC,KAAK,SACLC,QAASvC,EAAUiB,SACpB,wBAOX,C","sources":["pages/verifyemail.page.tsx"],"sourcesContent":["import { Box, Container, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {\n  FormProvider,\n  SubmitHandler,\n  useForm,\n} from 'react-hook-form';\nimport { object, string, TypeOf } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport FormInput from '../components/FormInput';\nimport { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { LoadingButton as _LoadingButton } from '@mui/lab';\nimport { toast } from 'react-toastify';\nimport { useMutation } from '@tanstack/react-query';\nimport { verifyEmailFn } from '../api/authApi';\n\nconst LoadingButton = styled(_LoadingButton)`\n  padding: 0.6rem 0;\n  background-color: #f9d13e;\n  color: #2363eb;\n  font-weight: 500;\n\n  &:hover {\n    background-color: #ebc22c;\n    transform: translateY(-2px);\n  }\n`;\n\nconst verificationCodeSchema = object({\n  verificationCode: string().min(1, 'Verification code is required'),\n});\n\nexport type VerificationCodeInput = TypeOf<\n  typeof verificationCodeSchema\n>;\n\nconst EmailVerificationPage = () => {\n  const { verificationCode } = useParams();\n\n  const methods = useForm<VerificationCodeInput>({\n    resolver: zodResolver(verificationCodeSchema),\n  });\n\n  // ? API Login Mutation\n  const { mutate: verifyEmail, isLoading } = useMutation(\n    (verificationCode: string) => verifyEmailFn(verificationCode),\n    {\n      onSuccess: (data) => {\n        toast.success(data?.message);\n        navigate('/login');\n      },\n      onError(error: any) {\n        if (Array.isArray((error as any).data.error)) {\n          (error as any).data.error.forEach((el: any) =>\n            toast.error(el.message, {\n              position: 'top-right',\n            })\n          );\n        } else {\n          toast.error((error as any).data.message, {\n            position: 'top-right',\n          });\n        }\n      },\n    }\n  );\n\n  const navigate = useNavigate();\n\n  const {\n    reset,\n    handleSubmit,\n    formState: { isSubmitSuccessful },\n    register,\n  } = methods;\n\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      reset();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isSubmitSuccessful]);\n\n  useEffect(() => {\n    if (verificationCode) {\n      reset({ verificationCode });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onSubmitHandler: SubmitHandler<VerificationCodeInput> = ({\n    verificationCode,\n  }) => {\n    // ? Executing the verifyEmail Mutation\n    verifyEmail(verificationCode);\n  };\n\n  return (\n    <Container\n      maxWidth={false}\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: '100vh',\n        backgroundColor: '#2363eb',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'column',\n        }}\n      >\n        <Typography\n          textAlign=\"center\"\n          component=\"h1\"\n          sx={{\n            color: '#f9d13e',\n            fontWeight: 600,\n            fontSize: { xs: '2rem', md: '3rem' },\n            mb: 2,\n            letterSpacing: 1,\n          }}\n        >\n          Verify Email Address\n        </Typography>\n\n        {/* <FormProvider {...methods}>\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit(onSubmitHandler)}\n            noValidate\n            autoComplete=\"off\"\n            maxWidth=\"27rem\"\n            width=\"100%\"\n            sx={{\n              backgroundColor: '#e5e7eb',\n              p: { xs: '1rem', sm: '2rem' },\n              borderRadius: 2,\n            }}\n          >\n            <FormInput\n              name=\"verificationCode\"\n              label=\"Verification Code\"\n            />\n\n            <LoadingButton\n              variant=\"contained\"\n              sx={{ mt: 1 }}\n              fullWidth\n              disableElevation\n              type=\"submit\"\n              loading={isLoading}\n            >\n              Verify Email\n            </LoadingButton>\n          </Box>\n        </FormProvider> */}\n        <form onSubmit={handleSubmit(onSubmitHandler)}>\n          <input {...register('verificationCode')} />\n          <LoadingButton\n            variant=\"contained\"\n            sx={{ mt: 1 }}\n            fullWidth\n            disableElevation\n            type=\"submit\"\n            loading={isLoading}\n          >\n            Verify Email\n          </LoadingButton>\n        </form>\n      </Box>\n    </Container>\n  );\n};\n\nexport default EmailVerificationPage;\n"],"names":["LoadingButton","styled","_LoadingButton","_templateObject","_taggedTemplateLiteral","verificationCodeSchema","object","verificationCode","string","min","useParams","methods","useForm","resolver","zodResolver","_useMutation","useMutation","verifyEmailFn","onSuccess","data","toast","success","message","navigate","onError","error","Array","isArray","forEach","el","position","verifyEmail","mutate","isLoading","useNavigate","reset","handleSubmit","isSubmitSuccessful","formState","register","useEffect","_jsx","Container","maxWidth","sx","display","justifyContent","alignItems","minHeight","backgroundColor","children","_jsxs","Box","flexDirection","Typography","textAlign","component","color","fontWeight","fontSize","xs","md","mb","letterSpacing","onSubmit","_ref","_objectSpread","variant","mt","fullWidth","disableElevation","type","loading"],"sourceRoot":""}